openapi: 3.0.0
info:
  title: Personal restaurants knowledge base
  description: |
    This API allows to store and view personal ratings and notes 
    related to tried or ordered from restaurants 
    and places you may want to visit/order from in the future.
    
    Note: all requests are performed in context of currently logged in user.
  version: '1'

paths:
  /restaurants:
    get:
      summary: Query restaurants by criteria
      operationId: queryRestaurantsByCriteria
      tags: [Restaurants]
      x-contracts:
        - contractId: 1
          name: Query with all parameters
        - contractId: 2
          name: Try to query with no parameters
      parameters:
        - name: nameBeginsWith
          in: query
          schema:
            type: string
          x-contracts:
            - contractId: 1
              value: KF
        - name: category
          in: query
          schema:
            $ref: '#/components/schemas/Category'
          x-contracts:
            - contractId: 1
              value: FAST_FOOD
        - name: triedBefore
          in: query
          schema:
            type: boolean
          x-contracts:
            - contractId: 1
              value: true
        - name: ratingAtLeast
          in: query
          schema:
            $ref: '#/components/schemas/Rating'
          x-contracts:
            - contractId: 1
              value: 3
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestaurantData'
          x-contracts:
            - contractId: 1
              body:
                - name: KFC City Centre
                  categories: ['FAST_FOOD', 'CHICKEN']
                  triedBefore: true
                  rating: 4
                  review: 'Not my gig'
                - name: KFC Some Street
                  categories: ['FAST_FOOD', 'CHICKEN']
                  triedBefore: true
                  rating: 5
        400:
          description: When no param is provided
          x-contracts:
            - contractId: 2
    post:
      summary: Create a restaurant entry
      operationId: createRestaurant
      tags: [Restaurants]
      x-contracts:
        - contractId: 1
          name: Create a restaurant for future visit
        - contractId: 2
          name: Create visited restaurant
        - contractId: 3
          name: Try to create a restaurant with duplicated name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantData'
        x-contracts:
          - contractId: 1
            body:
              name: Trattoria Napoli
              categories: ['PIZZA']
          - contractId: 2
            body:
              name: KFC Westfield Arkadia
              categories: ['FAST_FOOD', 'CHICKEN']
              rating: 4
              review: 'Not my gig'
              notes:
                - Try to avoid it
          - contractId: 3
            body:
              name: KFC City Centre
      responses:
        201:
          description: Restaurant created
          headers:
            Location:
              schema:
                type: string
          x-contracts:
            - contractId: 1
              headers:
                Location: /restaurants/Trattoria+Napoli
            - contractId: 2
              headers:
                Location: /restaurants/KFC+Westfield+Arkadia
        409:
          description: Restaurant with given name already exists
          x-contracts:
            - contractId: 3
  /restaurants/{restaurantName}:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    get:
      summary: Get restaurant details
      operationId: getRestaurantDetails
      tags: [Restaurant entry]
      x-contracts:
        - contractId: 1
          name: Get restaurant details
          contractPath: /restaurants/KFC City Centre
        - contractId: 2
          name: Try to get details of restaurant entry that does not exist
          contractPath: /restaurants/Trattoria Napoli
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantData'
          x-contracts:
            - contractId: 1
              body:
                name: KFC City Centre
                categories: [ 'FAST_FOOD', 'CHICKEN' ]
                rating: 4
                review: 'Not my gig'
                notes:
                  - Try to avoid it
        404:
          description: Restaurant with given name not found
          x-contracts:
            - contractId: 2
    patch:
      summary: Rename the restaurant
      operationId: renameRestaurant
      tags: [Restaurant entry]
      x-contracts:
        - contractId: 1
          name: Successfully rename restaurant
          contractPath: /restaurants/KFC City Centre
        - contractId: 2
          name: Rename to the same name
          contractPath: /restaurants/KFC City Centre
        - contractId: 3
          name: Try to rename restaurant that does not exist
          contractPath: /restaurants/Trattoria Napoli
        - contractId: 4
          name: Try to rename restaurant to a name that matches another restaurant entry
          contractPath: /restaurants/KFC City Centre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
        x-contracts:
          - contractId: 1
            body:
              name: Trattoria Napoli
          - contractId: 2
            body:
              name: KFC City Centre
          - contractId: 3
            body:
              name: Does not matter
          - contractId: 4
            body:
              name: KFC Some Street
      responses:
        204:
          description: Restaurant renamed
          x-contracts:
            - contractId: 1
            - contractId: 2
        404:
          description: Restaurant with given name not found
          x-contracts:
            - contractId: 3
        409:
          description: Restaurant with target name already exists
          x-contracts:
            - contractId: 4
    delete:
      summary: Delete the restaurant entry
      operationId: deleteRestaurant
      tags: [Restaurant entry]
      x-contracts:
        - contractId: 1
          name: Successfully delete restaurant
          contractPath: /restaurants/KFC City Centre
        - contractId: 2
          name: Try to delete restaurant that does not exist
          contractPath: /restaurants/Trattoria Napoli
      responses:
        204:
          description: Restaurant entry deleted
          x-contracts:
            - contractId: 1
        404:
          description: Restaurant with given name not found
          x-contracts:
            - contractId: 2
  /restaurants/{restaurantName}/rating:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    put:
      summary: Update rating of the restaurant
      description: Additionally marks the restaurant as tried
      operationId: updateRestaurantRating
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  $ref: '#/components/schemas/Rating'
              required:
                - rating
      responses:
        204:
          description: Rating updated
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/review:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    put:
      summary: Update review of the restaurant
      description: Additionally marks the restaurant as tried
      operationId: updateRestaurantReview
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
              required:
                - rating
      responses:
        204:
          description: Review updated
        404:
          description: Restaurant with given name not found
    delete:
      summary: Delete review of the restaurant
      operationId: deleteRestaurantReview
      tags: [Restaurant entry]
      responses:
        204:
          description: Review deleted
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/tried:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    post:
      summary: Mark restaurant as tried
      operationId: markRestaurantAsTried
      tags: [Restaurant entry]
      responses:
        204:
          description: Marked as tried
        404:
          description: Restaurant with given name not found
    delete:
      summary: Mark restaurant as not tried
      operationId: markRestaurantAsNotTried
      description: Additionally removes the review and rating from the restaurant entry
      tags: [Restaurant entry]
      responses:
        204:
          description: Marked as not tried
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/categories:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    post:
      summary: Add a category
      operationId: addRestaurantCategory
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Category'
              required:
                - name
      responses:
        200:
          description: Category added
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Category'
        404:
          description: Restaurant with given name not found
    put:
      summary: Replace categories
      operationId: replaceRestaurantCategories
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Category'
      responses:
        204:
          description: Categories replaced
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/categories/{categoryName}:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
      - name: categoryName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Category'
    delete:
      summary: Remove the category
      operationId: removeRestaurantCategory
      tags: [Restaurant entry]
      responses:
        204:
          description: Category removed
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/notes:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    post:
      summary: Add a note
      operationId: addRestaurantNote
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
              required:
                - note
      responses:
        200:
          description: Note added
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  type: string
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/notes/{noteIndex}:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
      - name: noteIndex
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Replace the note
      operationId: replaceRestaurantNote
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
              required:
                - note
      responses:
        204:
          description: Note replaced
        400:
          description: Note index is not a positive integer
        404:
          description: Restaurant with given name not found
    delete:
      summary: Remove the note
      operationId: removeRestaurantNote
      tags: [Restaurant entry]
      responses:
        204:
          description: Note removed
        400:
          description: Note index is not a positive integer
        404:
          description: Restaurant with given name not found

components:
  schemas:
    RestaurantData:
      type: object
      properties:
        name:
          type: string
        categories:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Category'
        triedBefore:
          type: boolean
        rating:
          $ref: '#/components/schemas/Rating'
        review:
          type: string
        notes:
          type: array
          items:
            type: string
    Category:
      type: string
      enum:
        - PIZZA
        - BURGER
        - SANDWICH
        - FAST_FOOD
        - PASTA
        - LUNCH
        - KEBAB
        - CHICKEN
        - VEGAN
        - RAMEN
        - SUSHI
        - ASIAN
        - INDIAN
        - OTHER
    Rating:
      type: integer
      minimum: 1
      maximum: 10
  parameters:
    path.RestaurantName:
      name: restaurantName
      in: path
      required: true
      schema:
        type: string
  responses:
    RestaurantResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestaurantData'