openapi: 3.0.0
info:
  title: Personal restaurants knowledge base
  description: |
    This API allows to store and view personal ratings and notes 
    related to visited or ordered from restaurants 
    and places you may want to visit/order from in the future.
  version: '1'

paths:
  /restaurants:
    get:
      summary: Query restaurants by criteria
      operationId: queryRestaurantsByCriteria
      tags: [Restaurants]
      parameters:
        - name: nameContaining
          in: query
          schema:
            type: string
        - name: categories
          in: query
          schema:
            type: array
            minItems: 1
            uniqueItems: true
            items:
              $ref: '#/components/schemas/Category'
        - name: triedBefore
          in: query
          schema:
            type: boolean
        - name: ratingAtLeast
          in: query
          schema:
            $ref: '#/components/schemas/Rating'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
    post:
      summary: Create a restaurant entry
      operationId: createRestaurant
      tags: [Restaurants]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        201:
          $ref: '#/components/responses/RestaurantResponse'
  /restaurants/{restaurantName}:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    get:
      summary: Get restaurant details
      operationId: getRestaurantDetails
      tags: [Restaurant entry]
      responses:
        200:
          $ref: '#/components/responses/RestaurantResponse'
        404:
          description: Restaurant with given name not found
    patch:
      summary: Rename the restaurant
      operationId: renameRestaurant
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        204:
          description: Restaurant renamed
        404:
          description: Restaurant with given name not found
    delete:
      summary: Delete the restaurant entry
      operationId: deleteRestaurant
      tags: [Restaurant entry]
      responses:
        204:
          description: Restaurant entry deleted
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/rating:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    put:
      summary: Update rating of the restaurant
      operationId: updateRestaurantRating
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  $ref: '#/components/schemas/Rating'
              required:
                - rating
      responses:
        204:
          description: Rating updated
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/visited:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    post:
      summary: Mark restaurant as visited
      operationId: markRestaurantAsVisited
      tags: [Restaurant entry]
      responses:
        204:
          description: Marked as visited
        404:
          description: Restaurant with given name not found
    delete:
      summary: Mark restaurant as not visited
      operationId: markRestaurantAsNotVisited
      description: Additionally removes the rating from the restaurant entry
      tags: [Restaurant entry]
      responses:
        204:
          description: Marked as not visited
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/categories:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    post:
      summary: Add a category
      operationId: addRestaurantCategory
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Category'
              required:
                - name
      responses:
        200:
          description: Category added
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Category'
        404:
          description: Restaurant with given name not found
    put:
      summary: Replace categories
      operationId: replaceRestaurantCategories
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Category'
      responses:
        204:
          description: Categories replaced
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/categories/{categoryName}:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
      - name: categoryName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Category'
    delete:
      summary: Remove the category
      operationId: removeRestaurantCategory
      tags: [Restaurant entry]
      responses:
        204:
          description: Category removed
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/notes:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
    post:
      summary: Add a note
      operationId: addRestaurantNote
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
              required:
                - note
      responses:
        200:
          description: Note added
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  type: string
        404:
          description: Restaurant with given name not found
  /restaurants/{restaurantName}/notes/{noteIndex}:
    parameters:
      - $ref: '#/components/parameters/path.RestaurantName'
      - name: noteIndex
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Replace the note
      operationId: replaceRestaurantNote
      tags: [Restaurant entry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
              required:
                - note
      responses:
        204:
          description: Note replaced
        404:
          description: Restaurant with given name not found
    delete:
      summary: Remove the note
      operationId: removeRestaurantNote
      tags: [Restaurant entry]
      responses:
        204:
          description: Note removed
        404:
          description: Restaurant with given name not found

components:
  schemas:
    Restaurant:
      type: object
      properties:
        name:
          type: string
        categories:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Category'
        triedBefore:
          type: boolean
        rating:
          $ref: '#/components/schemas/Rating'
        review:
          type: string
        notes:
          type: array
          nullable: false
          items:
            type: string
    Category:
      type: string
      enum:
        - pizza
        - burger
        - fast_food
        - pasta
        - lunch
        - kebab
        - chicken
        - vegan
        - ramen
        - sushi
        - asian
        - indian
        - other
    Rating:
      type: integer
      minimum: 1
      maximum: 10
  parameters:
    path.RestaurantName:
      name: restaurantName
      in: path
      required: true
      schema:
        type: string
  responses:
    RestaurantResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Restaurant'