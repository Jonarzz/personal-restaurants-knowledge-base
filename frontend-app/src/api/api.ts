/* tslint:disable */
/* eslint-disable */
/**
 * Personal restaurants knowledge base
 * This API allows to store and view personal ratings and notes  related to tried or ordered from restaurants  and places you may want to visit/order from in the future.  Note: all requests are performed in context of currently logged in user. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddRestaurantCategoryRequest
 */
export interface AddRestaurantCategoryRequest {
    /**
     * 
     * @type {Category}
     * @memberof AddRestaurantCategoryRequest
     */
    'category': Category;
}
/**
 * 
 * @export
 * @interface AddRestaurantNoteRequest
 */
export interface AddRestaurantNoteRequest {
    /**
     * 
     * @type {string}
     * @memberof AddRestaurantNoteRequest
     */
    'note': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Category = {
    Pizza: 'PIZZA',
    Burger: 'BURGER',
    Sandwich: 'SANDWICH',
    FastFood: 'FAST_FOOD',
    Pasta: 'PASTA',
    Lunch: 'LUNCH',
    Kebab: 'KEBAB',
    Chicken: 'CHICKEN',
    Vegan: 'VEGAN',
    Ramen: 'RAMEN',
    Sushi: 'SUSHI',
    Asian: 'ASIAN',
    Indian: 'INDIAN',
    Other: 'OTHER'
} as const;

export type Category = typeof Category[keyof typeof Category];


/**
 * 
 * @export
 * @interface RestaurantData
 */
export interface RestaurantData {
    /**
     * 
     * @type {string}
     * @memberof RestaurantData
     */
    'name'?: string;
    /**
     * 
     * @type {Set<Category>}
     * @memberof RestaurantData
     */
    'categories'?: Set<Category>;
    /**
     * 
     * @type {boolean}
     * @memberof RestaurantData
     */
    'triedBefore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RestaurantData
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof RestaurantData
     */
    'review'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RestaurantData
     */
    'notes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateRestaurantRatingRequest
 */
export interface UpdateRestaurantRatingRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateRestaurantRatingRequest
     */
    'rating': number;
}
/**
 * 
 * @export
 * @interface UpdateRestaurantReviewRequest
 */
export interface UpdateRestaurantReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRestaurantReviewRequest
     */
    'review': string;
}

/**
 * RestaurantEntryApi - axios parameter creator
 * @export
 */
export const RestaurantEntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a category
         * @param {string} restaurantName 
         * @param {AddRestaurantCategoryRequest} addRestaurantCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRestaurantCategory: async (restaurantName: string, addRestaurantCategoryRequest: AddRestaurantCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('addRestaurantCategory', 'restaurantName', restaurantName)
            // verify required parameter 'addRestaurantCategoryRequest' is not null or undefined
            assertParamExists('addRestaurantCategory', 'addRestaurantCategoryRequest', addRestaurantCategoryRequest)
            const localVarPath = `/restaurants/{restaurantName}/categories`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRestaurantCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a note
         * @param {string} restaurantName 
         * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRestaurantNote: async (restaurantName: string, addRestaurantNoteRequest: AddRestaurantNoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('addRestaurantNote', 'restaurantName', restaurantName)
            // verify required parameter 'addRestaurantNoteRequest' is not null or undefined
            assertParamExists('addRestaurantNote', 'addRestaurantNoteRequest', addRestaurantNoteRequest)
            const localVarPath = `/restaurants/{restaurantName}/notes`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRestaurantNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the restaurant entry
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant: async (restaurantName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('deleteRestaurant', 'restaurantName', restaurantName)
            const localVarPath = `/restaurants/{restaurantName}`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete review of the restaurant
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurantReview: async (restaurantName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('deleteRestaurantReview', 'restaurantName', restaurantName)
            const localVarPath = `/restaurants/{restaurantName}/review`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get restaurant details
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantDetails: async (restaurantName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('getRestaurantDetails', 'restaurantName', restaurantName)
            const localVarPath = `/restaurants/{restaurantName}`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Additionally removes the review and rating from the restaurant entry
         * @summary Mark restaurant as not tried
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markRestaurantAsNotTried: async (restaurantName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('markRestaurantAsNotTried', 'restaurantName', restaurantName)
            const localVarPath = `/restaurants/{restaurantName}/tried`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark restaurant as tried
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markRestaurantAsTried: async (restaurantName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('markRestaurantAsTried', 'restaurantName', restaurantName)
            const localVarPath = `/restaurants/{restaurantName}/tried`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove the category
         * @param {string} restaurantName 
         * @param {Category} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRestaurantCategory: async (restaurantName: string, categoryName: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('removeRestaurantCategory', 'restaurantName', restaurantName)
            // verify required parameter 'categoryName' is not null or undefined
            assertParamExists('removeRestaurantCategory', 'categoryName', categoryName)
            const localVarPath = `/restaurants/{restaurantName}/categories/{categoryName}`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)))
                .replace(`{${"categoryName"}}`, encodeURIComponent(String(categoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove the note
         * @param {string} restaurantName 
         * @param {number} noteIndex 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRestaurantNote: async (restaurantName: string, noteIndex: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('removeRestaurantNote', 'restaurantName', restaurantName)
            // verify required parameter 'noteIndex' is not null or undefined
            assertParamExists('removeRestaurantNote', 'noteIndex', noteIndex)
            const localVarPath = `/restaurants/{restaurantName}/notes/{noteIndex}`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)))
                .replace(`{${"noteIndex"}}`, encodeURIComponent(String(noteIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace categories
         * @param {string} restaurantName 
         * @param {Set<Category>} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceRestaurantCategories: async (restaurantName: string, category: Set<Category>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('replaceRestaurantCategories', 'restaurantName', restaurantName)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('replaceRestaurantCategories', 'category', category)
            const localVarPath = `/restaurants/{restaurantName}/categories`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace the note
         * @param {string} restaurantName 
         * @param {number} noteIndex 
         * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceRestaurantNote: async (restaurantName: string, noteIndex: number, addRestaurantNoteRequest: AddRestaurantNoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('replaceRestaurantNote', 'restaurantName', restaurantName)
            // verify required parameter 'noteIndex' is not null or undefined
            assertParamExists('replaceRestaurantNote', 'noteIndex', noteIndex)
            // verify required parameter 'addRestaurantNoteRequest' is not null or undefined
            assertParamExists('replaceRestaurantNote', 'addRestaurantNoteRequest', addRestaurantNoteRequest)
            const localVarPath = `/restaurants/{restaurantName}/notes/{noteIndex}`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)))
                .replace(`{${"noteIndex"}}`, encodeURIComponent(String(noteIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRestaurantNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the restaurant
         * @param {string} restaurantName 
         * @param {RestaurantData} restaurantData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant: async (restaurantName: string, restaurantData: RestaurantData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('updateRestaurant', 'restaurantName', restaurantName)
            // verify required parameter 'restaurantData' is not null or undefined
            assertParamExists('updateRestaurant', 'restaurantData', restaurantData)
            const localVarPath = `/restaurants/{restaurantName}`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restaurantData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Additionally marks the restaurant as tried
         * @summary Update rating of the restaurant
         * @param {string} restaurantName 
         * @param {UpdateRestaurantRatingRequest} updateRestaurantRatingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurantRating: async (restaurantName: string, updateRestaurantRatingRequest: UpdateRestaurantRatingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('updateRestaurantRating', 'restaurantName', restaurantName)
            // verify required parameter 'updateRestaurantRatingRequest' is not null or undefined
            assertParamExists('updateRestaurantRating', 'updateRestaurantRatingRequest', updateRestaurantRatingRequest)
            const localVarPath = `/restaurants/{restaurantName}/rating`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRestaurantRatingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Additionally marks the restaurant as tried
         * @summary Update review of the restaurant
         * @param {string} restaurantName 
         * @param {UpdateRestaurantReviewRequest} updateRestaurantReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurantReview: async (restaurantName: string, updateRestaurantReviewRequest: UpdateRestaurantReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurantName' is not null or undefined
            assertParamExists('updateRestaurantReview', 'restaurantName', restaurantName)
            // verify required parameter 'updateRestaurantReviewRequest' is not null or undefined
            assertParamExists('updateRestaurantReview', 'updateRestaurantReviewRequest', updateRestaurantReviewRequest)
            const localVarPath = `/restaurants/{restaurantName}/review`
                .replace(`{${"restaurantName"}}`, encodeURIComponent(String(restaurantName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRestaurantReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantEntryApi - functional programming interface
 * @export
 */
export const RestaurantEntryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantEntryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a category
         * @param {string} restaurantName 
         * @param {AddRestaurantCategoryRequest} addRestaurantCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRestaurantCategory(restaurantName: string, addRestaurantCategoryRequest: AddRestaurantCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRestaurantCategory(restaurantName, addRestaurantCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a note
         * @param {string} restaurantName 
         * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRestaurantNote(restaurantName: string, addRestaurantNoteRequest: AddRestaurantNoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRestaurantNote(restaurantName, addRestaurantNoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the restaurant entry
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRestaurant(restaurantName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRestaurant(restaurantName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete review of the restaurant
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRestaurantReview(restaurantName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRestaurantReview(restaurantName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get restaurant details
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRestaurantDetails(restaurantName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRestaurantDetails(restaurantName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Additionally removes the review and rating from the restaurant entry
         * @summary Mark restaurant as not tried
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markRestaurantAsNotTried(restaurantName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markRestaurantAsNotTried(restaurantName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark restaurant as tried
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markRestaurantAsTried(restaurantName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markRestaurantAsTried(restaurantName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove the category
         * @param {string} restaurantName 
         * @param {Category} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRestaurantCategory(restaurantName: string, categoryName: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRestaurantCategory(restaurantName, categoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove the note
         * @param {string} restaurantName 
         * @param {number} noteIndex 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRestaurantNote(restaurantName: string, noteIndex: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRestaurantNote(restaurantName, noteIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Replace categories
         * @param {string} restaurantName 
         * @param {Set<Category>} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceRestaurantCategories(restaurantName: string, category: Set<Category>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceRestaurantCategories(restaurantName, category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Replace the note
         * @param {string} restaurantName 
         * @param {number} noteIndex 
         * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceRestaurantNote(restaurantName: string, noteIndex: number, addRestaurantNoteRequest: AddRestaurantNoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceRestaurantNote(restaurantName, noteIndex, addRestaurantNoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the restaurant
         * @param {string} restaurantName 
         * @param {RestaurantData} restaurantData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRestaurant(restaurantName: string, restaurantData: RestaurantData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRestaurant(restaurantName, restaurantData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Additionally marks the restaurant as tried
         * @summary Update rating of the restaurant
         * @param {string} restaurantName 
         * @param {UpdateRestaurantRatingRequest} updateRestaurantRatingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRestaurantRating(restaurantName: string, updateRestaurantRatingRequest: UpdateRestaurantRatingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRestaurantRating(restaurantName, updateRestaurantRatingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Additionally marks the restaurant as tried
         * @summary Update review of the restaurant
         * @param {string} restaurantName 
         * @param {UpdateRestaurantReviewRequest} updateRestaurantReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRestaurantReview(restaurantName: string, updateRestaurantReviewRequest: UpdateRestaurantReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRestaurantReview(restaurantName, updateRestaurantReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RestaurantEntryApi - factory interface
 * @export
 */
export const RestaurantEntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantEntryApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a category
         * @param {string} restaurantName 
         * @param {AddRestaurantCategoryRequest} addRestaurantCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRestaurantCategory(restaurantName: string, addRestaurantCategoryRequest: AddRestaurantCategoryRequest, options?: any): AxiosPromise<Set<Category>> {
            return localVarFp.addRestaurantCategory(restaurantName, addRestaurantCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a note
         * @param {string} restaurantName 
         * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRestaurantNote(restaurantName: string, addRestaurantNoteRequest: AddRestaurantNoteRequest, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.addRestaurantNote(restaurantName, addRestaurantNoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the restaurant entry
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant(restaurantName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRestaurant(restaurantName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete review of the restaurant
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurantReview(restaurantName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRestaurantReview(restaurantName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get restaurant details
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantDetails(restaurantName: string, options?: any): AxiosPromise<RestaurantData> {
            return localVarFp.getRestaurantDetails(restaurantName, options).then((request) => request(axios, basePath));
        },
        /**
         * Additionally removes the review and rating from the restaurant entry
         * @summary Mark restaurant as not tried
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markRestaurantAsNotTried(restaurantName: string, options?: any): AxiosPromise<void> {
            return localVarFp.markRestaurantAsNotTried(restaurantName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark restaurant as tried
         * @param {string} restaurantName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markRestaurantAsTried(restaurantName: string, options?: any): AxiosPromise<void> {
            return localVarFp.markRestaurantAsTried(restaurantName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove the category
         * @param {string} restaurantName 
         * @param {Category} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRestaurantCategory(restaurantName: string, categoryName: Category, options?: any): AxiosPromise<void> {
            return localVarFp.removeRestaurantCategory(restaurantName, categoryName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove the note
         * @param {string} restaurantName 
         * @param {number} noteIndex 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRestaurantNote(restaurantName: string, noteIndex: number, options?: any): AxiosPromise<void> {
            return localVarFp.removeRestaurantNote(restaurantName, noteIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace categories
         * @param {string} restaurantName 
         * @param {Set<Category>} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceRestaurantCategories(restaurantName: string, category: Set<Category>, options?: any): AxiosPromise<void> {
            return localVarFp.replaceRestaurantCategories(restaurantName, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace the note
         * @param {string} restaurantName 
         * @param {number} noteIndex 
         * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceRestaurantNote(restaurantName: string, noteIndex: number, addRestaurantNoteRequest: AddRestaurantNoteRequest, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.replaceRestaurantNote(restaurantName, noteIndex, addRestaurantNoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the restaurant
         * @param {string} restaurantName 
         * @param {RestaurantData} restaurantData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant(restaurantName: string, restaurantData: RestaurantData, options?: any): AxiosPromise<RestaurantData> {
            return localVarFp.updateRestaurant(restaurantName, restaurantData, options).then((request) => request(axios, basePath));
        },
        /**
         * Additionally marks the restaurant as tried
         * @summary Update rating of the restaurant
         * @param {string} restaurantName 
         * @param {UpdateRestaurantRatingRequest} updateRestaurantRatingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurantRating(restaurantName: string, updateRestaurantRatingRequest: UpdateRestaurantRatingRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateRestaurantRating(restaurantName, updateRestaurantRatingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Additionally marks the restaurant as tried
         * @summary Update review of the restaurant
         * @param {string} restaurantName 
         * @param {UpdateRestaurantReviewRequest} updateRestaurantReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurantReview(restaurantName: string, updateRestaurantReviewRequest: UpdateRestaurantReviewRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateRestaurantReview(restaurantName, updateRestaurantReviewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RestaurantEntryApi - object-oriented interface
 * @export
 * @class RestaurantEntryApi
 * @extends {BaseAPI}
 */
export class RestaurantEntryApi extends BaseAPI {
    /**
     * 
     * @summary Add a category
     * @param {string} restaurantName 
     * @param {AddRestaurantCategoryRequest} addRestaurantCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public addRestaurantCategory(restaurantName: string, addRestaurantCategoryRequest: AddRestaurantCategoryRequest, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).addRestaurantCategory(restaurantName, addRestaurantCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a note
     * @param {string} restaurantName 
     * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public addRestaurantNote(restaurantName: string, addRestaurantNoteRequest: AddRestaurantNoteRequest, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).addRestaurantNote(restaurantName, addRestaurantNoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the restaurant entry
     * @param {string} restaurantName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public deleteRestaurant(restaurantName: string, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).deleteRestaurant(restaurantName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete review of the restaurant
     * @param {string} restaurantName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public deleteRestaurantReview(restaurantName: string, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).deleteRestaurantReview(restaurantName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get restaurant details
     * @param {string} restaurantName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public getRestaurantDetails(restaurantName: string, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).getRestaurantDetails(restaurantName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Additionally removes the review and rating from the restaurant entry
     * @summary Mark restaurant as not tried
     * @param {string} restaurantName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public markRestaurantAsNotTried(restaurantName: string, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).markRestaurantAsNotTried(restaurantName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark restaurant as tried
     * @param {string} restaurantName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public markRestaurantAsTried(restaurantName: string, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).markRestaurantAsTried(restaurantName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove the category
     * @param {string} restaurantName 
     * @param {Category} categoryName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public removeRestaurantCategory(restaurantName: string, categoryName: Category, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).removeRestaurantCategory(restaurantName, categoryName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove the note
     * @param {string} restaurantName 
     * @param {number} noteIndex 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public removeRestaurantNote(restaurantName: string, noteIndex: number, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).removeRestaurantNote(restaurantName, noteIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace categories
     * @param {string} restaurantName 
     * @param {Set<Category>} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public replaceRestaurantCategories(restaurantName: string, category: Set<Category>, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).replaceRestaurantCategories(restaurantName, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace the note
     * @param {string} restaurantName 
     * @param {number} noteIndex 
     * @param {AddRestaurantNoteRequest} addRestaurantNoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public replaceRestaurantNote(restaurantName: string, noteIndex: number, addRestaurantNoteRequest: AddRestaurantNoteRequest, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).replaceRestaurantNote(restaurantName, noteIndex, addRestaurantNoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the restaurant
     * @param {string} restaurantName 
     * @param {RestaurantData} restaurantData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public updateRestaurant(restaurantName: string, restaurantData: RestaurantData, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).updateRestaurant(restaurantName, restaurantData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Additionally marks the restaurant as tried
     * @summary Update rating of the restaurant
     * @param {string} restaurantName 
     * @param {UpdateRestaurantRatingRequest} updateRestaurantRatingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public updateRestaurantRating(restaurantName: string, updateRestaurantRatingRequest: UpdateRestaurantRatingRequest, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).updateRestaurantRating(restaurantName, updateRestaurantRatingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Additionally marks the restaurant as tried
     * @summary Update review of the restaurant
     * @param {string} restaurantName 
     * @param {UpdateRestaurantReviewRequest} updateRestaurantReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantEntryApi
     */
    public updateRestaurantReview(restaurantName: string, updateRestaurantReviewRequest: UpdateRestaurantReviewRequest, options?: AxiosRequestConfig) {
        return RestaurantEntryApiFp(this.configuration).updateRestaurantReview(restaurantName, updateRestaurantReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RestaurantsApi - axios parameter creator
 * @export
 */
export const RestaurantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a restaurant entry
         * @param {RestaurantData} [restaurantData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRestaurant: async (restaurantData?: RestaurantData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restaurantData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query restaurants by criteria
         * @param {string} [nameBeginsWith] 
         * @param {Category} [category] 
         * @param {boolean} [triedBefore] 
         * @param {number} [ratingAtLeast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryRestaurantsByCriteria: async (nameBeginsWith?: string, category?: Category, triedBefore?: boolean, ratingAtLeast?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameBeginsWith !== undefined) {
                localVarQueryParameter['nameBeginsWith'] = nameBeginsWith;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (triedBefore !== undefined) {
                localVarQueryParameter['triedBefore'] = triedBefore;
            }

            if (ratingAtLeast !== undefined) {
                localVarQueryParameter['ratingAtLeast'] = ratingAtLeast;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantsApi - functional programming interface
 * @export
 */
export const RestaurantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a restaurant entry
         * @param {RestaurantData} [restaurantData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRestaurant(restaurantData?: RestaurantData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRestaurant(restaurantData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query restaurants by criteria
         * @param {string} [nameBeginsWith] 
         * @param {Category} [category] 
         * @param {boolean} [triedBefore] 
         * @param {number} [ratingAtLeast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryRestaurantsByCriteria(nameBeginsWith?: string, category?: Category, triedBefore?: boolean, ratingAtLeast?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RestaurantData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryRestaurantsByCriteria(nameBeginsWith, category, triedBefore, ratingAtLeast, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RestaurantsApi - factory interface
 * @export
 */
export const RestaurantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a restaurant entry
         * @param {RestaurantData} [restaurantData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRestaurant(restaurantData?: RestaurantData, options?: any): AxiosPromise<void> {
            return localVarFp.createRestaurant(restaurantData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query restaurants by criteria
         * @param {string} [nameBeginsWith] 
         * @param {Category} [category] 
         * @param {boolean} [triedBefore] 
         * @param {number} [ratingAtLeast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryRestaurantsByCriteria(nameBeginsWith?: string, category?: Category, triedBefore?: boolean, ratingAtLeast?: number, options?: any): AxiosPromise<Array<RestaurantData>> {
            return localVarFp.queryRestaurantsByCriteria(nameBeginsWith, category, triedBefore, ratingAtLeast, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RestaurantsApi - object-oriented interface
 * @export
 * @class RestaurantsApi
 * @extends {BaseAPI}
 */
export class RestaurantsApi extends BaseAPI {
    /**
     * 
     * @summary Create a restaurant entry
     * @param {RestaurantData} [restaurantData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public createRestaurant(restaurantData?: RestaurantData, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).createRestaurant(restaurantData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query restaurants by criteria
     * @param {string} [nameBeginsWith] 
     * @param {Category} [category] 
     * @param {boolean} [triedBefore] 
     * @param {number} [ratingAtLeast] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public queryRestaurantsByCriteria(nameBeginsWith?: string, category?: Category, triedBefore?: boolean, ratingAtLeast?: number, options?: AxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).queryRestaurantsByCriteria(nameBeginsWith, category, triedBefore, ratingAtLeast, options).then((request) => request(this.axios, this.basePath));
    }
}


